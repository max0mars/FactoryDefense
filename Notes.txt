IDEAS:
- Make it more of an RPG
    - each 'level' is a planet
        - Resource extraction planets, Boss fight planets, AI planets (attack instead of defend? to find AI)
    - use resources to upgrade
    - collect, build, upgrade robots (classes, abilities, stats, synergy bonuses)
    - collect turret blueprints to build when defending base, (maybe can be upgraded or maybe static, idk?)
    - Can build and upgrade parts but have to find 'AIs' to control them
    - AIs have control robot husks, have different rarities, abilities, tendencies, get bonus stats when paired with parts from a specific class
- Gameplay could either be rouguelite where if your extractor is destroyed you lose, robots gone forever when dead, etc.
- progression based gameplay where losing has no penalty just grind easy levels to get stronger.

Features to implement:

Step 1: Make Everything Generic and don't be lazy!
Add tags to everything
all objects inhereit from 'Entity'
Entity:
    string tag,
    int Health,
    int x, y,
    int hitboxtype, //defines if circle, square, etc.
    hitboxdimension, //could be radius, width, etc. depending on hitboxtype (maybe tuple depending on hitboxtype)
    function takeDamage(),
    bool destroy //signals main to dereference object
    
- structures (extractor, enemy base, turrects)
- enemy-bots
- heroes
        


House Cleaning:
- make buttons and stuff pretty
